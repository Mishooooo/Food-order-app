{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\misho\\\\OneDrive\\\\Desktop\\\\food-order-app\\\\src\\\\Store\\\\CartProvider.js\",\n  _s = $RefreshSig$();\nimport { useContext, useReducer, useState } from \"react\";\nimport cartContext from \"./cart-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultState = {\n  items: [],\n  totalAmount: 0\n};\nconst amountReducer = function (state, action) {\n  if (action.type === \"ADD\") {\n    const totalAmount = state.totalAmount + action.val.price * action.val.amount;\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.val.id);\n    const existingCartItem = state.items[existingCartItemIndex];\n    let updatedItems;\n    if (existingCartItem) {\n      const updatedItem = {\n        ...existingCartItem,\n        amount: existingCartItem.amount + +action.val.amount\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n      console.log('UpdatedUpdatedItems', updatedItems);\n      if (updatedItem[0].amount === 0) {\n        updatedItems.slice(existingCartItemIndex, 1);\n      }\n    } else {\n      updatedItems = state.items.concat({\n        id: action.val.id,\n        name: action.val.name,\n        amount: +action.val.amount,\n        price: action.val.price\n      });\n    }\n    return {\n      items: updatedItems,\n      totalAmount: totalAmount\n    };\n  }\n};\nconst CartProvider = function (props) {\n  _s();\n  const addedAmount = useContext(cartContext);\n  const [cartState, dispatchAmount] = useReducer(amountReducer, defaultState);\n  const amountHandler = function (items) {\n    dispatchAmount({\n      type: \"ADD\",\n      val: items\n    });\n  };\n  const numberOfCartItems = cartState.items.reduce((curNumber, item) => {\n    return curNumber + +item.amount;\n  }, 0);\n  const contextdefaultState = {\n    totalAmount: cartState.totalAmount,\n    items: cartState.items,\n    addItem: amountHandler,\n    numberOfCartItems: numberOfCartItems\n  };\n  console.log(addedAmount.addItem);\n  return /*#__PURE__*/_jsxDEV(cartContext.Provider, {\n    value: contextdefaultState,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(CartProvider, \"wFdYpbgkZe516DA7y0nnU9lyMtg=\");\n_c = CartProvider;\nexport default CartProvider;\n\n// import { useContext, useReducer, useState } from \"react\";\n\n// import cartContext from \"./cart-context\";\n\n// const defaultState = { items: [], totalAmount: 0 };\n\n// const amountReducer = function (state, action) {\n//   const totalAmount = state.totalAmount + action.val.price * action.val.amount;\n//   let updatedItems;\n\n//   if (action.type === \"ADD\") {\n//     const existingCartItemIndex = state.items.findIndex(\n//       (item) => item.id === action.val.id\n//     );\n\n//     const existingCartItem = state.items[existingCartItemIndex];\n\n//     if (existingCartItem) {\n//       const updatedItem = {\n//         ...existingCartItem,\n//         amount: existingCartItem.amount + +action.val.amount,\n//       };\n\n//       updatedItems = [...state.items];\n//       updatedItems[existingCartItemIndex] = updatedItem;\n//     } else {\n//       updatedItems = state.items.concat({\n//         id: action.val.id,\n//         name: action.val.name,\n//         amount: +action.val.amount,\n//         price: action.val.price,\n//       });\n//     }\n\n//     return {\n//       items: updatedItems,\n\n//       totalAmount: totalAmount,\n//     };\n//   }\n\n//   if (action.type === \"REMOVE\") {\n//   //   if (state.value == 1) {\n//   //     const existingCartItemIndex = state.items.findIndex(\n//   //       (item) => item.id !== action.val.id\n\n//   //     );\n//   //          updatedItems = [...state.items.slice(existingCartItemIndex, 1)]\n//   //   } else { updatedItems = state.items.concat({\n//   //       id: action.val.id,\n//   //       name: action.val.name,\n//   //       amount: +action.val.amount,\n//   //       price: action.val.price,\n//   //     })}\n//   //  return {\n//   //    items: updatedItems,\n\n//   //    totalAmount: totalAmount,\n//   //  };\n//   // }\n\n//       const existingCartItemIndex = state.items.findIndex(\n//       (item) => item.id === action.val.id\n//     );\n\n//     const existingCartItem = state.items[existingCartItemIndex];\n\n//     if (existingCartItem) {\n//       const updatedItem = {\n//         ...existingCartItem,\n//         amount: existingCartItem.amount + +action.val.amount,\n//       };\n\n//        updatedItems = [...state.items];\n\n//       //  updatedItems[existingCartItemIndex] = updatedItem;\n\n//       if (updatedItem.amount === 0) {\n//        updatedItems.slice(existingCartItemIndex, 1)\n//       }\n\n//     } else {\n//       updatedItems = state.items.concat({\n//         id: action.val.id,\n//         name: action.val.name,\n//         amount: +action.val.amount,\n//         price: action.val.price,\n//       });\n//     }\n\n//     return {\n//       items: updatedItems,\n\n//       totalAmount: totalAmount,\n//     };\n//   }\n// };\n// const CartProvider = function (props) {\n//   const addedAmount = useContext(cartContext);\n\n//   const [cartState, dispatchAmount] = useReducer(amountReducer, defaultState);\n\n//   const amountHandler = function (items) {\n//     dispatchAmount({ type: \"ADD\", val: items });\n//   };\n\n//   const decreaseAmountHandler = function (items) {\n//     dispatchAmount({ type: \"REMOVE\", val: items });\n//   };\n\n//   const numberOfCartItems = cartState.items.reduce((curNumber, item) => {\n//     return curNumber + +item.amount;\n//   }, 0);\n\n//   const contextdefaultState = {\n//     totalAmount: cartState.totalAmount,\n//     items: cartState.items,\n//     addItem: amountHandler,\n//     removeItem: decreaseAmountHandler,\n//     numberOfCartItems: numberOfCartItems,\n//   };\n\n//   console.log(addedAmount.addItem);\n//   return (\n//     <cartContext.Provider value={contextdefaultState}>\n//       {props.children}\n//     </cartContext.Provider>\n//   );\n// };\n// export default CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["useContext","useReducer","useState","cartContext","defaultState","items","totalAmount","amountReducer","state","action","type","val","price","amount","existingCartItemIndex","findIndex","item","id","existingCartItem","updatedItems","updatedItem","console","log","slice","concat","name","CartProvider","props","addedAmount","cartState","dispatchAmount","amountHandler","numberOfCartItems","reduce","curNumber","contextdefaultState","addItem","children"],"sources":["C:/Users/misho/OneDrive/Desktop/food-order-app/src/Store/CartProvider.js"],"sourcesContent":["import { useContext, useReducer, useState } from \"react\";\r\n\r\nimport cartContext from \"./cart-context\";\r\n\r\nconst defaultState = { items: [], totalAmount: 0 };\r\n\r\nconst amountReducer = function (state, action) {\r\n  if (action.type === \"ADD\") {\r\n    const totalAmount =\r\n      state.totalAmount + action.val.price * action.val.amount;\r\n\r\n\r\n    const existingCartItemIndex = state.items.findIndex(\r\n      (item) => item.id === action.val.id\r\n    );\r\n      \r\n\r\n\r\n\r\n  const existingCartItem = state.items[existingCartItemIndex];\r\n\r\n  let updatedItems;\r\n\r\n\r\n  if (existingCartItem) {\r\n    const updatedItem = {\r\n      ...existingCartItem,\r\n      amount: existingCartItem.amount + +action.val.amount,\r\n    };\r\n   \r\n\r\n    updatedItems = [...state.items];\r\n    updatedItems[existingCartItemIndex] = updatedItem;\r\n   \r\nconsole.log('UpdatedUpdatedItems', updatedItems)\r\n if (updatedItem[0].amount === 0) {\r\n       updatedItems.slice(existingCartItemIndex, 1)\r\n      }\r\n\r\n  } else {\r\n    updatedItems = state.items.concat({\r\n      id: action.val.id,\r\n      name: action.val.name,\r\n      amount: +action.val.amount,\r\n      price: action.val.price,\r\n    });\r\n   \r\n  }\r\n\r\n    return {\r\n      items: updatedItems,\r\n\r\n      totalAmount: totalAmount,\r\n    };\r\n  }\r\n};\r\nconst CartProvider = function (props) {\r\n  const addedAmount = useContext(cartContext);\r\n\r\n  const [cartState, dispatchAmount] = useReducer(amountReducer, defaultState);\r\n\r\n  const amountHandler = function (items) {\r\n    dispatchAmount({ type: \"ADD\", val: items });\r\n  };\r\n\r\n  const numberOfCartItems = cartState.items.reduce((curNumber, item) => {\r\n    return curNumber + +item.amount;\r\n  }, 0);\r\n\r\n  const contextdefaultState = {\r\n    totalAmount: cartState.totalAmount,\r\n    items: cartState.items,\r\n    addItem: amountHandler,\r\n    numberOfCartItems: numberOfCartItems,\r\n  };\r\n\r\n  console.log(addedAmount.addItem);\r\n  return (\r\n    <cartContext.Provider value={contextdefaultState}>\r\n      {props.children}\r\n    </cartContext.Provider>\r\n  );\r\n};\r\nexport default CartProvider;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import { useContext, useReducer, useState } from \"react\";\r\n\r\n// import cartContext from \"./cart-context\";\r\n\r\n// const defaultState = { items: [], totalAmount: 0 };\r\n\r\n// const amountReducer = function (state, action) {\r\n//   const totalAmount = state.totalAmount + action.val.price * action.val.amount;\r\n//   let updatedItems;\r\n\r\n//   if (action.type === \"ADD\") {\r\n//     const existingCartItemIndex = state.items.findIndex(\r\n//       (item) => item.id === action.val.id\r\n//     );\r\n\r\n//     const existingCartItem = state.items[existingCartItemIndex];\r\n\r\n//     if (existingCartItem) {\r\n//       const updatedItem = {\r\n//         ...existingCartItem,\r\n//         amount: existingCartItem.amount + +action.val.amount,\r\n//       };\r\n\r\n//       updatedItems = [...state.items];\r\n//       updatedItems[existingCartItemIndex] = updatedItem;\r\n//     } else {\r\n//       updatedItems = state.items.concat({\r\n//         id: action.val.id,\r\n//         name: action.val.name,\r\n//         amount: +action.val.amount,\r\n//         price: action.val.price,\r\n//       });\r\n//     }\r\n\r\n//     return {\r\n//       items: updatedItems,\r\n\r\n//       totalAmount: totalAmount,\r\n//     };\r\n//   }\r\n\r\n//   if (action.type === \"REMOVE\") {\r\n//   //   if (state.value == 1) {\r\n//   //     const existingCartItemIndex = state.items.findIndex(\r\n//   //       (item) => item.id !== action.val.id\r\n   \r\n//   //     );\r\n//   //          updatedItems = [...state.items.slice(existingCartItemIndex, 1)]\r\n//   //   } else { updatedItems = state.items.concat({\r\n//   //       id: action.val.id,\r\n//   //       name: action.val.name,\r\n//   //       amount: +action.val.amount,\r\n//   //       price: action.val.price,\r\n//   //     })}\r\n//   //  return {\r\n//   //    items: updatedItems,\r\n\r\n//   //    totalAmount: totalAmount,\r\n//   //  };\r\n//   // }\r\n\r\n\r\n//       const existingCartItemIndex = state.items.findIndex(\r\n//       (item) => item.id === action.val.id\r\n//     );\r\n\r\n//     const existingCartItem = state.items[existingCartItemIndex];\r\n\r\n\r\n\r\n//     if (existingCartItem) {\r\n//       const updatedItem = {\r\n//         ...existingCartItem,\r\n//         amount: existingCartItem.amount + +action.val.amount,\r\n//       };\r\n      \r\n//        updatedItems = [...state.items];\r\n\r\n   \r\n//       //  updatedItems[existingCartItemIndex] = updatedItem;\r\n\r\n\r\n//       if (updatedItem.amount === 0) {\r\n//        updatedItems.slice(existingCartItemIndex, 1)\r\n//       }\r\n      \r\n//     } else {\r\n//       updatedItems = state.items.concat({\r\n//         id: action.val.id,\r\n//         name: action.val.name,\r\n//         amount: +action.val.amount,\r\n//         price: action.val.price,\r\n//       });\r\n//     }\r\n\r\n//     return {\r\n//       items: updatedItems,\r\n\r\n//       totalAmount: totalAmount,\r\n//     };\r\n//   }\r\n// };\r\n// const CartProvider = function (props) {\r\n//   const addedAmount = useContext(cartContext);\r\n\r\n//   const [cartState, dispatchAmount] = useReducer(amountReducer, defaultState);\r\n\r\n//   const amountHandler = function (items) {\r\n//     dispatchAmount({ type: \"ADD\", val: items });\r\n//   };\r\n\r\n//   const decreaseAmountHandler = function (items) {\r\n//     dispatchAmount({ type: \"REMOVE\", val: items });\r\n//   };\r\n\r\n//   const numberOfCartItems = cartState.items.reduce((curNumber, item) => {\r\n//     return curNumber + +item.amount;\r\n//   }, 0);\r\n\r\n//   const contextdefaultState = {\r\n//     totalAmount: cartState.totalAmount,\r\n//     items: cartState.items,\r\n//     addItem: amountHandler,\r\n//     removeItem: decreaseAmountHandler,\r\n//     numberOfCartItems: numberOfCartItems,\r\n//   };\r\n\r\n//   console.log(addedAmount.addItem);\r\n//   return (\r\n//     <cartContext.Provider value={contextdefaultState}>\r\n//       {props.children}\r\n//     </cartContext.Provider>\r\n//   );\r\n// };\r\n// export default CartProvider;\r\n"],"mappings":";;AAAA,SAASA,UAAU,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAExD,OAAOC,WAAW,MAAM,gBAAgB;AAAC;AAEzC,MAAMC,YAAY,GAAG;EAAEC,KAAK,EAAE,EAAE;EAAEC,WAAW,EAAE;AAAE,CAAC;AAElD,MAAMC,aAAa,GAAG,UAAUC,KAAK,EAAEC,MAAM,EAAE;EAC7C,IAAIA,MAAM,CAACC,IAAI,KAAK,KAAK,EAAE;IACzB,MAAMJ,WAAW,GACfE,KAAK,CAACF,WAAW,GAAGG,MAAM,CAACE,GAAG,CAACC,KAAK,GAAGH,MAAM,CAACE,GAAG,CAACE,MAAM;IAG1D,MAAMC,qBAAqB,GAAGN,KAAK,CAACH,KAAK,CAACU,SAAS,CAChDC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKR,MAAM,CAACE,GAAG,CAACM,EAAE,CACpC;IAKH,MAAMC,gBAAgB,GAAGV,KAAK,CAACH,KAAK,CAACS,qBAAqB,CAAC;IAE3D,IAAIK,YAAY;IAGhB,IAAID,gBAAgB,EAAE;MACpB,MAAME,WAAW,GAAG;QAClB,GAAGF,gBAAgB;QACnBL,MAAM,EAAEK,gBAAgB,CAACL,MAAM,GAAG,CAACJ,MAAM,CAACE,GAAG,CAACE;MAChD,CAAC;MAGDM,YAAY,GAAG,CAAC,GAAGX,KAAK,CAACH,KAAK,CAAC;MAC/Bc,YAAY,CAACL,qBAAqB,CAAC,GAAGM,WAAW;MAErDC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEH,YAAY,CAAC;MAC/C,IAAIC,WAAW,CAAC,CAAC,CAAC,CAACP,MAAM,KAAK,CAAC,EAAE;QAC3BM,YAAY,CAACI,KAAK,CAACT,qBAAqB,EAAE,CAAC,CAAC;MAC7C;IAEJ,CAAC,MAAM;MACLK,YAAY,GAAGX,KAAK,CAACH,KAAK,CAACmB,MAAM,CAAC;QAChCP,EAAE,EAAER,MAAM,CAACE,GAAG,CAACM,EAAE;QACjBQ,IAAI,EAAEhB,MAAM,CAACE,GAAG,CAACc,IAAI;QACrBZ,MAAM,EAAE,CAACJ,MAAM,CAACE,GAAG,CAACE,MAAM;QAC1BD,KAAK,EAAEH,MAAM,CAACE,GAAG,CAACC;MACpB,CAAC,CAAC;IAEJ;IAEE,OAAO;MACLP,KAAK,EAAEc,YAAY;MAEnBb,WAAW,EAAEA;IACf,CAAC;EACH;AACF,CAAC;AACD,MAAMoB,YAAY,GAAG,UAAUC,KAAK,EAAE;EAAA;EACpC,MAAMC,WAAW,GAAG5B,UAAU,CAACG,WAAW,CAAC;EAE3C,MAAM,CAAC0B,SAAS,EAAEC,cAAc,CAAC,GAAG7B,UAAU,CAACM,aAAa,EAAEH,YAAY,CAAC;EAE3E,MAAM2B,aAAa,GAAG,UAAU1B,KAAK,EAAE;IACrCyB,cAAc,CAAC;MAAEpB,IAAI,EAAE,KAAK;MAAEC,GAAG,EAAEN;IAAM,CAAC,CAAC;EAC7C,CAAC;EAED,MAAM2B,iBAAiB,GAAGH,SAAS,CAACxB,KAAK,CAAC4B,MAAM,CAAC,CAACC,SAAS,EAAElB,IAAI,KAAK;IACpE,OAAOkB,SAAS,GAAG,CAAClB,IAAI,CAACH,MAAM;EACjC,CAAC,EAAE,CAAC,CAAC;EAEL,MAAMsB,mBAAmB,GAAG;IAC1B7B,WAAW,EAAEuB,SAAS,CAACvB,WAAW;IAClCD,KAAK,EAAEwB,SAAS,CAACxB,KAAK;IACtB+B,OAAO,EAAEL,aAAa;IACtBC,iBAAiB,EAAEA;EACrB,CAAC;EAEDX,OAAO,CAACC,GAAG,CAACM,WAAW,CAACQ,OAAO,CAAC;EAChC,oBACE,QAAC,WAAW,CAAC,QAAQ;IAAC,KAAK,EAAED,mBAAoB;IAAA,UAC9CR,KAAK,CAACU;EAAQ;IAAA;IAAA;IAAA;EAAA,QACM;AAE3B,CAAC;AAAC,GA1BIX,YAAY;AAAA,KAAZA,YAAY;AA2BlB,eAAeA,YAAY;;AAgC3B;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}